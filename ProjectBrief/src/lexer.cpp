#include <fstream>
#include "../include/lexer.hpp"
#include <iostream>

TokenValue yylval;
void lex(std::string source){
    
    extern FILE *yyin;
    yyin = fopen(source.c_str(), "r");
    std::ofstream lexerOutput;

    size_t last_dot_index = source.find_last_of(".");
    std::string outputPath = source.substr(0, last_dot_index) + ".o.txt";

    lexerOutput.open(outputPath, std::ios_base::app);
    if (yyin == NULL)
    {
        perror("Could not open source file");
        
    }
    else{
        std::cout<<"Lexing: "<<source<<std::endl;

        
        while(1){

            TokenType type=(TokenType)yylex(); //Get type of next token.

            if(type==None){
                break; // No more tokens

        }
    }
        std::cout<<"Lexing done"<<std::endl;

}
}

/*

#include <iostream>
#include <fstream>
#include "parser.tab.h" // include the header file generated by bison

extern int yylex(); // declare the lexer function generated by flex

int main() {
    std::ifstream input_file("input.txt"); // open the input file

    if (!input_file.is_open()) { // check if the file was opened successfully
        std::cerr << "Error: could not open input file\n";
        return 1;
    }

    // redirect input to the lexer
    yyrestart(&input_file);

    // call the parser to start parsing
    yyparse();

    // close the input file
    input_file.close();

    return 0;
}*/